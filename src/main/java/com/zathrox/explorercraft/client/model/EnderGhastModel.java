package com.zathrox.explorercraft.client.model;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.MathHelper;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

@OnlyIn(Dist.CLIENT)
public class EnderGhastModel<T extends Entity> extends EntityModel<T> {

    ModelRenderer head;
    ModelRenderer back1;
    ModelRenderer back2;
    ModelRenderer back3;
    ModelRenderer fin1;
    ModelRenderer fin3;
    ModelRenderer fin4;
    ModelRenderer leftGill1;
    ModelRenderer leftGill2;
    ModelRenderer leftGill3;
    ModelRenderer rightGill1;
    ModelRenderer rightGill2;
    ModelRenderer rightGill3;
    ModelRenderer leftFin1;
    ModelRenderer leftFin2;
    ModelRenderer leftFin3;
    ModelRenderer leftFin4;
    ModelRenderer rightFin1;
    ModelRenderer rightFin2;
    ModelRenderer rightFin4;
    ModelRenderer rightFin3;
    ModelRenderer rightTentacle4;
    ModelRenderer rightTentacle1;
    ModelRenderer rightTentacle2;
    ModelRenderer rightTentacle3;
    ModelRenderer leftTentacle4;
    ModelRenderer leftTentacle3;
    ModelRenderer leftTentacle2;
    ModelRenderer leftTentacle1;
    ModelRenderer foreHead;
    ModelRenderer rightCheekBone;
    ModelRenderer leftCheekBone;
    ModelRenderer middleCheek;
    ModelRenderer shin;
    ModelRenderer leftChop;
    ModelRenderer noseBridge;
    ModelRenderer rightChop;
    ModelRenderer fin2;
    
    public EnderGhastModel() {
        textureWidth = 265;
        textureHeight = 256;

        head = new ModelRenderer(this, 0, 0);
        head.addBox(-15F, -15F, -20F, 30, 30, 20);
        head.setRotationPoint(0F, 9F, 0F);
        head.setTextureSize(265, 256);
        head.mirror = true;
        setRotation(head, 0F, 0F, 0F);
        back1 = new ModelRenderer(this, 135, 0);
        back1.addBox(-12F, -12F, 0F, 25, 25, 10);
        back1.setRotationPoint(0F, 10F, 0F);
        back1.setTextureSize(265, 256);
        back1.mirror = true;
        setRotation(back1, 0F, 0F, 0F);
        back2 = new ModelRenderer(this, 135, 36);
        back2.addBox(-10F, -9F, 10F, 20, 20, 10);
        back2.setRotationPoint(0F, 12F, 0F);
        back2.setTextureSize(265, 256);
        back2.mirror = true;
        setRotation(back2, 0F, 0F, 0F);
        back3 = new ModelRenderer(this, 135, 68);
        back3.addBox(-7.5F, -5.5F, 20F, 15, 15, 9);
        back3.setRotationPoint(0F, 12F, 0F);
        back3.setTextureSize(265, 256);
        back3.mirror = true;
        setRotation(back3, 0F, 0F, 0F);
        fin1 = new ModelRenderer(this, 207, 0);
        fin1.addBox(-8.5F, 0F, 0F, 18, 0, 23);
        fin1.setRotationPoint(0F, -6F, 0F);
        fin1.setTextureSize(265, 256);
        fin1.mirror = true;
        setRotation(fin1, 0.1047198F, 0F, 0F);
        fin3 = new ModelRenderer(this, 207, 54);
        fin3.addBox(-6F, 0F, 0F, 12, 0, 13);
        fin3.setRotationPoint(0F, 3F, 20F);
        fin3.setTextureSize(265, 256);
        fin3.mirror = true;
        setRotation(fin3, 0.1047198F, 0F, 0F);
        fin4 = new ModelRenderer(this, 207, 69);
        fin4.addBox(-6F, 0F, 0F, 12, 0, 11);
        fin4.setRotationPoint(0F, 6.5F, 25F);
        fin4.setTextureSize(265, 256);
        fin4.mirror = true;
        setRotation(fin4, 0.1047198F, 0F, 0F);
        leftGill1 = new ModelRenderer(this, 100, 0);
        leftGill1.addBox(0F, 0F, 0F, 1, 4, 16);
        leftGill1.setRotationPoint(14F, 12F, -19F);
        leftGill1.setTextureSize(265, 256);
        leftGill1.mirror = true;
        setRotation(leftGill1, 0.2443461F, 0F, -0.4537856F);
        leftGill2 = new ModelRenderer(this, 100, 21);
        leftGill2.addBox(0F, 0F, 0F, 1, 4, 15);
        leftGill2.setRotationPoint(14F, 14F, -16F);
        leftGill2.setTextureSize(265, 256);
        leftGill2.mirror = true;
        setRotation(leftGill2, 0.2443461F, 0F, -0.4537856F);
        leftGill3 = new ModelRenderer(this, 100, 42);
        leftGill3.addBox(0F, 0F, 0F, 1, 4, 12);
        leftGill3.setRotationPoint(13.6F, 16F, -13F);
        leftGill3.setTextureSize(265, 256);
        leftGill3.mirror = true;
        setRotation(leftGill3, 0.2443461F, 0F, -0.4537856F);
        rightGill1 = new ModelRenderer(this, 100, 60);
        rightGill1.addBox(0F, 0F, 0F, 1, 4, 16);
        rightGill1.setRotationPoint(-15F, 12F, -19F);
        rightGill1.setTextureSize(265, 256);
        rightGill1.mirror = true;
        setRotation(rightGill1, 0.2443461F, 0F, 0.4537856F);
        rightGill2 = new ModelRenderer(this, 100, 81);
        rightGill2.addBox(0F, 0F, 0F, 1, 4, 15);
        rightGill2.setRotationPoint(-15F, 14F, -16F);
        rightGill2.setTextureSize(265, 256);
        rightGill2.mirror = true;
        setRotation(rightGill2, 0.2443461F, 0F, 0.4537856F);
        rightGill3 = new ModelRenderer(this, 100, 101);
        rightGill3.addBox(0F, 0F, 0F, 1, 4, 12);
        rightGill3.setRotationPoint(-14.5F, 16F, -13F);
        rightGill3.setTextureSize(265, 256);
        rightGill3.mirror = true;
        setRotation(rightGill3, 0.2443461F, 0F, 0.4537856F);
        leftFin1 = new ModelRenderer(this, 0, 128);
        leftFin1.addBox(0F, -2F, -3F, 6, 6, 6);
        leftFin1.setRotationPoint(12F, 21F, -5F);
        leftFin1.setTextureSize(265, 256);
        leftFin1.mirror = true;
        setRotation(leftFin1, 0F, 0F, 0F);
        leftFin2 = new ModelRenderer(this, 0, 128);
        leftFin2.addBox(10F, 8F, 2F, 6, 6, 6);
        leftFin2.setRotationPoint(0F, 10F, 0F);
        leftFin2.setTextureSize(265, 256);
        leftFin2.mirror = true;
        setRotation(leftFin2, 0F, 0F, 0F);
        leftFin3 = new ModelRenderer(this, 0, 128);
        leftFin3.addBox(7F, 6F, 12F, 6, 6, 6);
        leftFin3.setRotationPoint(0F, 12F, 0F);
        leftFin3.setTextureSize(265, 256);
        leftFin3.mirror = true;
        setRotation(leftFin3, 0F, 0F, 0F);
        leftFin4 = new ModelRenderer(this, 0, 128);
        leftFin4.addBox(4F, 4F, 21.5F, 6, 6, 6);
        leftFin4.setRotationPoint(0F, 12F, 0F);
        leftFin4.setTextureSize(265, 256);
        leftFin4.mirror = true;
        setRotation(leftFin4, 0F, 0F, 0F);
        rightFin1 = new ModelRenderer(this, 0, 128);
        rightFin1.addBox(-6F, -2F, -3F, 6, 6, 6);
        rightFin1.setRotationPoint(-12F, 21F, -5F);
        rightFin1.setTextureSize(265, 256);
        rightFin1.mirror = true;
        setRotation(rightFin1, 0F, 0F, 0F);
        rightFin2 = new ModelRenderer(this, 0, 128);
        rightFin2.addBox(-15F, 8F, 2F, 6, 6, 6);
        rightFin2.setRotationPoint(0F, 10F, 0F);
        rightFin2.setTextureSize(265, 256);
        rightFin2.mirror = true;
        setRotation(rightFin2, 0F, 0F, 0F);
        rightFin4 = new ModelRenderer(this, 0, 128);
        rightFin4.addBox(-10F, 4F, 21.5F, 6, 6, 6);
        rightFin4.setRotationPoint(0F, 12F, 0F);
        rightFin4.setTextureSize(265, 256);
        rightFin4.mirror = true;
        setRotation(rightFin4, 0F, 0F, 0F);
        rightFin3 = new ModelRenderer(this, 0, 128);
        rightFin3.addBox(-13F, 6F, 12F, 6, 6, 6);
        rightFin3.setRotationPoint(0F, 12F, 0F);
        rightFin3.setTextureSize(265, 256);
        rightFin3.mirror = true;
        setRotation(rightFin3, 0F, 0F, 0F);
        rightTentacle4 = new ModelRenderer(this, 84, 95);
        rightTentacle4.addBox(-1F, 0F, -1F, 2, 20, 2);
        rightTentacle4.setRotationPoint(-7F, 21F, 25F);
        rightTentacle4.setTextureSize(265, 256);
        rightTentacle4.mirror = true;
        setRotation(rightTentacle4, 0.7853982F, 0F, 0F);
        rightTentacle1 = new ModelRenderer(this, 70, 95);
        rightTentacle1.addBox(-1F, 0F, -1F, 2, 30, 2);
        rightTentacle1.setRotationPoint(-15F, 23F, -5F);
        rightTentacle1.setTextureSize(265, 256);
        rightTentacle1.mirror = true;
        setRotation(rightTentacle1, 0.7853982F, 0F, 0F);
        rightTentacle2 = new ModelRenderer(this, 70, 95);
        rightTentacle2.addBox(-1F, 0F, -1F, 2, 30, 2);
        rightTentacle2.setRotationPoint(-12F, 22F, 5F);
        rightTentacle2.setTextureSize(265, 256);
        rightTentacle2.mirror = true;
        setRotation(rightTentacle2, 0.7853982F, 0F, 0F);
        rightTentacle3 = new ModelRenderer(this, 84, 95);
        rightTentacle3.addBox(-1F, 0F, -1F, 2, 20, 2);
        rightTentacle3.setRotationPoint(-10F, 22F, 15F);
        rightTentacle3.setTextureSize(265, 256);
        rightTentacle3.mirror = true;
        setRotation(rightTentacle3, 0.7853982F, 0F, 0F);
        leftTentacle4 = new ModelRenderer(this, 84, 95);
        leftTentacle4.addBox(-1F, 0F, -1F, 2, 20, 2);
        leftTentacle4.setRotationPoint(7F, 21F, 25F);
        leftTentacle4.setTextureSize(265, 256);
        leftTentacle4.mirror = true;
        setRotation(leftTentacle4, 0.7853982F, 0F, 0F);
        leftTentacle3 = new ModelRenderer(this, 84, 95);
        leftTentacle3.addBox(-1F, 0F, -1F, 2, 20, 2);
        leftTentacle3.setRotationPoint(10F, 22F, 15F);
        leftTentacle3.setTextureSize(265, 256);
        leftTentacle3.mirror = true;
        setRotation(leftTentacle3, 0.7853982F, 0F, 0F);
        leftTentacle2 = new ModelRenderer(this, 70, 95);
        leftTentacle2.addBox(-1F, 0F, -1F, 2, 30, 2);
        leftTentacle2.setRotationPoint(13F, 22F, 5F);
        leftTentacle2.setTextureSize(265, 256);
        leftTentacle2.mirror = true;
        setRotation(leftTentacle2, 0.7853982F, 0F, 0F);
        leftTentacle1 = new ModelRenderer(this, 70, 95);
        leftTentacle1.addBox(-1F, 0F, -1F, 2, 30, 2);
        leftTentacle1.setRotationPoint(15F, 23F, -5F);
        leftTentacle1.setTextureSize(265, 256);
        leftTentacle1.mirror = true;
        setRotation(leftTentacle1, 0.7853982F, 0F, 0F);
        foreHead = new ModelRenderer(this, 0, 50);
        foreHead.addBox(-15F, 0F, 0F, 30, 6, 2);
        foreHead.setRotationPoint(0F, -6F, -22F);
        foreHead.setTextureSize(265, 256);
        foreHead.mirror = true;
        setRotation(foreHead, 0F, 0F, 0F);
        rightCheekBone = new ModelRenderer(this, 0, 58);
        rightCheekBone.addBox(-4F, 0F, 0F, 4, 24, 2);
        rightCheekBone.setRotationPoint(-11F, 0F, -22F);
        rightCheekBone.setTextureSize(265, 256);
        rightCheekBone.mirror = true;
        setRotation(rightCheekBone, 0F, 0F, 0F);
        leftCheekBone = new ModelRenderer(this, 25, 58);
        leftCheekBone.addBox(0F, 0F, 0F, 4, 24, 2);
        leftCheekBone.setRotationPoint(11F, 0F, -22F);
        leftCheekBone.setTextureSize(265, 256);
        leftCheekBone.mirror = true;
        setRotation(leftCheekBone, 0F, 0F, 0F);
        middleCheek = new ModelRenderer(this, -1, 92);
        middleCheek.addBox(-11F, 0F, 0F, 22, 9, 2);
        middleCheek.setRotationPoint(0F, 5F, -22F);
        middleCheek.setTextureSize(265, 256);
        middleCheek.mirror = true;
        setRotation(middleCheek, 0F, 0F, 0F);
        shin = new ModelRenderer(this, 19, 115);
        shin.addBox(-4F, -2F, 0F, 8, 2, 2);
        shin.setRotationPoint(0F, 24F, -22F);
        shin.setTextureSize(265, 256);
        shin.mirror = true;
        setRotation(shin, 0F, 0F, 0F);
        leftChop = new ModelRenderer(this, 40, 113);
        leftChop.addBox(-3F, 0F, 0F, 7, 10, 2);
        leftChop.setRotationPoint(7F, 14F, -22F);
        leftChop.setTextureSize(265, 256);
        leftChop.mirror = true;
        setRotation(leftChop, 0F, 0F, 0F);
        noseBridge = new ModelRenderer(this, 12, 58);
        noseBridge.addBox(-2F, 0F, 0F, 4, 5, 2);
        noseBridge.setRotationPoint(0F, 0F, -22F);
        noseBridge.setTextureSize(265, 256);
        noseBridge.mirror = true;
        setRotation(noseBridge, 0F, 0F, 0F);
        rightChop = new ModelRenderer(this, 0, 113);
        rightChop.addBox(-4F, 0F, 0F, 7, 10, 2);
        rightChop.setRotationPoint(-7F, 14F, -22F);
        rightChop.setTextureSize(265, 256);
        rightChop.mirror = true;
        setRotation(rightChop, 0F, 0F, 0F);
        fin2 = new ModelRenderer(this, 207, 25);
        fin2.addBox(-7.5F, 0F, 0F, 15, 0, 27);
        fin2.setRotationPoint(0F, -2F, 10F);
        fin2.setTextureSize(265, 256);
        fin2.mirror = true;
        setRotation(fin2, 0.1047198F, 0F, 0F);

    }

    @Override
    public void setRotationAngles(T entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        rightTentacle4.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)4) + 0.4F;
        rightTentacle3.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)3) + 0.4F;
        rightTentacle2.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)2) + 0.4F;
        rightTentacle1.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)1) + 0.4F;
        leftTentacle4.rotateAngleX = rightTentacle4.rotateAngleX;
        leftTentacle3.rotateAngleX = rightTentacle3.rotateAngleX;
        leftTentacle2.rotateAngleX = rightTentacle2.rotateAngleX;
        leftTentacle1.rotateAngleX = rightTentacle1.rotateAngleX;
        fin1.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)4) - 0.2F;
        fin2.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)3) - 0.2F;
        fin3.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)2) - 0.2F;
        fin4.rotateAngleX = 0.2F * MathHelper.sin(limbSwing * 0.3F + (float)1) - 0.2F;
    }

    private void setRotation(ModelRenderer model, float x, float y, float z)
    {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    @Override
    public void render(MatrixStack matrixStackIn, IVertexBuilder bufferIn, int packedLightIn, int packedOverlayIn, float red, float green, float blue, float alpha) {
        head.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        back1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        back2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        back3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        fin1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        fin3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        fin4.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftGill1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftGill2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftGill3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightGill1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightGill2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightGill3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftFin1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftFin2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftFin3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftFin4.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightFin1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightFin2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightFin4.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightFin3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightTentacle4.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightTentacle1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightTentacle2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightTentacle3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftTentacle4.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftTentacle3.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftTentacle2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftTentacle1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        foreHead.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightCheekBone.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftCheekBone.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        middleCheek.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        shin.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftChop.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        noseBridge.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightChop.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        fin2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
    }
}
